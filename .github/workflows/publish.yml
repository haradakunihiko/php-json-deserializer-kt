name: Publish Release

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write
  actions: read

jobs:
  publish:
    # Only run if the PR was merged and it's a release PR
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          
      - name: Extract version from branch name
        id: version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          TAG=${BRANCH_NAME#release/}
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Found release: $TAG (version: $VERSION)"
          
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        
      - name: Verify version in build.gradle.kts
        run: |
          EXPECTED_VERSION="${{ steps.version.outputs.version }}"
          ACTUAL_VERSION=$(grep 'version = ' build.gradle.kts | sed 's/.*version = "\(.*\)".*/\1/')
          echo "Expected version: $EXPECTED_VERSION"
          echo "Actual version: $ACTUAL_VERSION"
          
          if [ "$ACTUAL_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Expected $EXPECTED_VERSION but found $ACTUAL_VERSION"
            exit 1
          fi
          echo "‚úÖ Version verified: $ACTUAL_VERSION"
          
      - name: Run tests
        run: ./gradlew test
        
      - name: Create GitHub Release with auto-generated notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          echo "Creating GitHub release for $TAG"
          gh release create "$TAG" \
            --title "Release $TAG" \
            --generate-notes \
            --latest
          echo "‚úÖ GitHub release created successfully"
            
      - name: Publish to Maven Central
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.MAVEN_CENTRAL_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.SIGNING_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.SIGNING_PASSWORD }}
        run: |
          echo "Publishing to Maven Central..."
          ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository
          echo "‚úÖ Published to Maven Central successfully"
          
      - name: Clean up release branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "Cleaning up release branch: $RELEASE_BRANCH"
          git push origin --delete "$RELEASE_BRANCH"
          echo "‚úÖ Release branch deleted"
          
      - name: Publish Summary
        run: |
          echo "üéâ Release ${{ steps.version.outputs.tag }} published successfully!"
          echo ""
          echo "üìã What was completed:"
          echo "‚úÖ GitHub release created with auto-generated notes"
          echo "‚úÖ Artifact published to Maven Central"
          echo "‚úÖ Release branch cleaned up"
          echo ""
          echo "üîó Links:"
          echo "- GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}"
          echo "- Maven Central: https://search.maven.org/artifact/${{ github.repository_owner }}/php-json-deserializer-kt/${{ steps.version.outputs.version }}/jar"
