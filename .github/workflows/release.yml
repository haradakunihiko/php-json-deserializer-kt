name: Release

on:
  pull_request:
    types: [closed]
    branches: [main]

permissions:
  contents: write

jobs:
  create-release:
    # Only run if the PR was merged and it's a release PR
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          
      - name: Extract version from branch name
        id: version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          TAG=${BRANCH_NAME#release/}
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Found release: $TAG (version: $VERSION)"
          
      - name: Verify version in build.gradle.kts
        run: |
          EXPECTED_VERSION="${{ steps.version.outputs.version }}"
          ACTUAL_VERSION=$(grep 'version = ' build.gradle.kts | sed 's/.*version = "\(.*\)".*/\1/')
          echo "Expected version: $EXPECTED_VERSION"
          echo "Actual version in build.gradle.kts: $ACTUAL_VERSION"
          
          if [ "$ACTUAL_VERSION" != "$EXPECTED_VERSION" ]; then
            echo "‚ùå Version mismatch! Expected $EXPECTED_VERSION but found $ACTUAL_VERSION"
            exit 1
          fi
          echo "‚úÖ Version verified: $ACTUAL_VERSION"
          
      - name: Create Git tag
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          COMMIT_SHA="${{ github.event.pull_request.merge_commit_sha }}"
          
          echo "Creating tag $TAG at commit $COMMIT_SHA"
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$TAG" -m "Release version ${{ steps.version.outputs.version }}" "$COMMIT_SHA"
          git push origin "$TAG"
          echo "‚úÖ Tag $TAG created and pushed successfully"
          
      - name: Create GitHub Release (Draft)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          
          echo "Creating GitHub release draft for $TAG"
          gh release create "$TAG" \
            --title "Release $TAG" \
            --generate-notes \
            --draft
          echo "‚úÖ GitHub release draft created successfully"
          echo "üìù Please review and publish the release manually from GitHub web UI"
          
      - name: Clean up release branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "Cleaning up release branch: $RELEASE_BRANCH"
          git push origin --delete "$RELEASE_BRANCH"
          echo "‚úÖ Release branch deleted"
          
      - name: Release Draft Created Successfully
        run: |
          TAG="${{ steps.version.outputs.tag }}"
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "üéâ Release draft for $TAG created successfully!"
          echo ""
          echo "üìã What was completed:"
          echo "‚úÖ Git tag $TAG created at merge commit"
          echo "‚úÖ GitHub release draft created with auto-generated notes"
          echo "‚úÖ Release branch cleaned up"
          echo ""
          echo "üìù Next steps:"
          echo "1. Review the release draft: https://github.com/${{ github.repository }}/releases/tag/$TAG"
          echo "2. Edit release notes if needed"
          echo "3. Publish the release manually"
          echo "4. Maven Central publishing will start automatically after publishing"
